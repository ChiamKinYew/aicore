# Generated with Cloud MTA Build Tool version 1.2.18
version=0.0.1
MBT=/usr/local/bin/mbt
ifndef p
$(error platform flag is expected. e.g. use make -f makefile.mta p=cf)
endif
target_provided=true
ifndef t
t="$(CURDIR)"
target_provided=false
endif
ifndef strict
strict=true
endif
ifndef mtar
mtar="*"
endif
# List of all the recipes to be executed during the build process
.PHONY: pre_validate pre_build validate aicore-srv meta mtar cleanup
# Default target compile all
all: pre_validate pre_build validate aicore-srv meta mtar cleanup
# Validate mta.yaml
pre_validate:
	@$(MBT) validate -r=${strict} -x="paths"

pre_build: pre_validate
	@$(MBT) project build -p=pre

# Set the current project repository path for general mta process
  PROJ_DIR := $(CURDIR)
# List of modules
modules = aicore-srv

# Execute all modules builds
# build module aicore-srv
aicore-srv: validate
	@echo 'INFO building the "aicore-srv" module...'
	@$(MBT) execute -d="$(PROJ_DIR)/gen/srv" -c='npm install --production'
# Pack module build artifacts
	@$(MBT) module pack -m=aicore-srv -p=${p} -t=${t}
	@echo 'INFO finished building the "aicore-srv" module'

# Create META-INF folder with MANIFEST.MF & mtad.yaml
meta: $(modules) post_build
	@$(MBT) gen meta -p=${p} -t=${t}

post_build: $(modules)
	@$(MBT) project build -p=post -t=${t}

# Validate mta.yaml
validate: pre_build
	@$(MBT) validate -r=${strict}

# Pack as MTAR artifact
mtar: $(modules) meta
	@$(MBT) gen mtar --mtar=${mtar} --target_provided=${target_provided} -t=${t}

cleanup: mtar
# Remove tmp folder
	@$(MBT) clean -t=${t}